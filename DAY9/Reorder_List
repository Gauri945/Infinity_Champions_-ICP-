/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

       

        
    class Solution {


        public ListNode reverseList(ListNode head) {
        
    ListNode curr=head;
    ListNode prev=null;
    ListNode Next=head;
    while(curr!=null){
        Next=curr.next;
        curr.next=prev;
        prev=curr;
        curr=Next;
    }
    return prev;


    }


  public ListNode middleNode(ListNode head) {
         //whithou mid // slow fast approach
     ListNode slow=head;
     ListNode fast = head;

     while( fast!=null && fast.next!=null){   
         slow=slow.next;  
         fast=fast.next.next;   //fast ko 2 br 
        }
        return slow;

       
        
    }


    public void reorderList(ListNode head) {

        if(head==null || head.next==null) return;

        ListNode leftMiddle=middleNode(head); ///middle
        ListNode head2=leftMiddle.next;  //middle aage wale ko head2 
        leftMiddle.next=null;   //middle tk ek linked list bnn gyi
        head2=reverseList(head2);  // 2 ko revers
        ListNode dummy =new ListNode(-1);
        ListNode temp=dummy;

       while(head!=null && head2!=null){
        temp.next=head;
        head=head.next;
        temp=temp.next;
      temp.next=head2;
      head2=head2.next;
      temp=temp.next;
       }
       if(head==null) temp.next=head2;
       if(head2==null) temp.next=head;
       head=dummy.next;
    }
}